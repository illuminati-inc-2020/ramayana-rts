#ifndef __RAKESH_ENUMS_H
#define __RAKESH_ENUMS_H

namespace ramayana {

	enum State { yes, no, dont_care };


	enum MapEditState { MAPEDITSTATE_ADD_UNIT, MAPEDITSTATE_ADD_BUILDING, MAPEDITSTATE_ADD_OTHERS, MAPEDITSTATE_CHANGE_TEXTURE, MAPEDITSTATE_CHANGE_TEAM, MAPEDITSTATE_DECREASE_HEIGHT, MAPEDITSTATE_INCREASE_HEIGHT };

	enum AbilityCategory { ABILITY_CATEGORY_STANCE, ABILITY_CATEGORY_BUILD, ABILITY_CATEGORY_TRANSFORM, ABILITY_CATEGORY_SPECIAL, ABILITY_CATEGORY_PASSIVE, ABILITY_CATEGORY_DEPLOY, ABILITY_CATEGORY_GENERAL, ABILITY_CATEGORY_EDIT, ABILITY_CATEGORY_SET_TEAM };
	AbilityCategory toSbilityCategory(string);

	enum AbilityType { ABILITY_BUILD, ABILTY_STANCE_GENERAL, ABILITY_STANCE_STANDGROUND, ABILITY_STANCE_HOLD_FIRE, ABILITY_STOP, ABILITY_DEPLOY, ABILITY_DEPLOY_ALL, ABILITY_DESTROY, ABILITY_SPECIAL, ABILITY_PASSIVE, ABILITY_TRANSFORM, ABILITY_SET_TEAM, ABILITY_SET_TERRAIN_TEXTURE, ABILITY_INCREASE_LEVEL, ABILITY_DECREASE_LEVEL };
	AbilityType toAbilityType(string);

	AbilityCategory toAbilityCategory(AbilityType);


	enum Diplomacy { DIPLOMACY_ENEMY, DIPLOMACY_ALLY, DIPLOMACY_NEUTRAL };
	Diplomacy toDiplomacyType(string);
	string diplomacyTypeToString(Diplomacy);


	enum UnitState { STATE_GENERAL, STATE_STANDBY, STATE_MOVING, STATE_JUMP, STATE_ATTACKING, STATE_SPECIAL_1, STATE_SPECIAL_2, STATE_SPECIAL_3, STATE_GATHER_FOOD, STATE_CUTTING_TREE, STATE_GATHER_WOOD, STATE_GATHER_STONE, STATE_GATHER_METAL, STATE_BUILD, STATE_BUILDING, STATE_DAMAGED, STATE_DEAD, STATE_TRANSFORM_IN, STATE_TRANSFORM_OUT };
	UnitState toUnitState(string);

	enum UnitCategory { UNIT_DECORATION, UNIT_WATER_DECORATION, UNIT_TREE, UNIT_STONE, UNIT_INFANTRY, UNIT_GIANT, UNIT_BEAST, UNIT_AMPHIBIAN, UNIT_CHARIOT, UNIT_BIRD, UNIT_AIR, UNIT_INSECT, UNIT_WATER, UNIT_BUILDING, UNIT_TREE_HOUSE, UNIT_MINE, UNIT_WATER_CONSTRUCTION };
	UnitCategory toUnitCategory(string);
	bool isResourceUnit(UnitCategory);
	bool isConstruction(UnitCategory);
	bool isDecoration(UnitCategory);
	bool isNaturalUnit(UnitCategory);
	bool isGroundUnit(UnitCategory);
	bool isWaterUnit(UnitCategory);
	bool isAirUnit(UnitCategory);
	bool isJumpableUnit(UnitCategory);


	enum UnitStance { STANCE_GENERAL, STANCE_STANDGROUND, STANCE_HOLDFIRE };
	UnitStance toUnitStance(string);


	enum CommandType { COMMAND_MOVE, COMMAND_ATTACK, COMMAND_CUT_TREE, COMMAND_GATHER_STONE, COMMAND_BUILD, COMMAND_GUARD, COMMAND_FOLLOW, COMMAND_GARRISON, COMMAND_SPECIAL_ATTACK };


	enum WeaponType { 
		WEAPON_NONE, WEAPON_SWORD, WEAPON_MACE, WEAPON_ARROW, WEAPON_STONE, WEAPON_SPIKE, 
		WEAPON_FIRE_ARROW, WEAPON_WIND_ARROW, WEAPON_WATER_ARROW, WEAPON_POISON_ARROW, WEAPON_DARK_ARROW, 
		WEAPON_REPLICATE_ARROW, WEAPON_SPECIAL_ARROW_1, WEAPON_SPECIAL_ARROW_2 
	};
	WeaponType toWeaponType(string);
	bool isRangedWeapon(WeaponType);
	bool isMeleeWeapon(WeaponType);


	enum TargetType { TARGET_ANY, TARGET_UNIT, TARGET_GROUND_UNIT, TARGET_AIR_UNIT, TARGET_WATER_UNIT, TARGET_GIANT_UNIT };
	TargetType toTargetType(string);


	enum WeatherType{ WEATHER_CLEAR, WEATHER_WINDY, WEATHER_RAINY, WEATHER_STORMY };
	WeatherType toWeatherType(string);

	enum GameState { 
		GAMESTATE_LOADING_GAME_PHASE1, 
			GAMESTATE_LOADING_GAME_PHASE2, 
		GAMESTATE_LOADING_MAP_PHASE1, 
			GAMESTATE_LOADING_MAP_PHASE2, 
		GAMESTATE_MAINMENU, 
			GAMESTATE_SETTINGSMENU_DISPLAY, 
			GAMESTATE_SETTINGSMENU_AUDIO, 
			GAMESTATE_SETTINGSMENU_GAME, 
			GAMESTATE_CAMPAIGNMENU, 
				GAMESTATE_CHAPTER_SCREEN,
					GAMESTATE_INTRO,
					GAMESTATE_INTRO_ONLY,
					GAMESTATE_OUTRO,
			GAMESTATE_NETWORKMENU, 
				GAMESTATE_HOSTGAMEMENU,
				GAMESTATE_JOINGAMEMENU,
			GAMESTATE_SKIRMISHMENU, 
			GAMESTATE_PLAYING, 
			GAMESTATE_EDITORMENU, 
			GAMESTATE_CREDITS_SCREEN,
			GAMESTATE_CONTROLS_SCREEN,
			GAMESTATE_SAVEGAMESNAPSHOT_MENU
	};
	bool isLoadingGameState(GameState);
	bool isSettingsMenuGameState(GameState);

	enum ChannelTag { CHANNEL_MUSIC, CHANNEL_AMBIENCE_WATER, CHANNEL_AMBIENCE_FOREST, CHANNEL_AMBIENCE_WIND, CHANNEL_AMBIENCE_RAIN, CHANNEL_SPEECH, CHANNEL_SOUND, CHANNEL_DUST_SOUND, CHANNEL_WIND_SOUND, CHANNEL_FIRE_SOUND, CHANNEL_WATER_SOUND, CHANNEL_THUNDER_SOUND };
	enum AudioType { AUDIO_MUSIC, AUDIO_AMBIENCE, AUDIO_SOUND, AUDIO_SPEECH};
}

#endif